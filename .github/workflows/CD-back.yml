name: CD Back

on:
  push:
    branches: ["298-0---implementar-cd-de-deploy-do-projeto"]
  pull_request:
    branches: ["298-0---implementar-cd-de-deploy-do-projeto"]

jobs:
  build-and-push-image:
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: gamb-back
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get semantic version
        id: version
        uses: PaulHatch/semantic-version@v5.0.3
        with:
          change_path: "gamb-back"
          major_pattern: "/^(feat!: | style!: | fix!: | test!:)$/"
          minor_pattern: "feat:"

      - name: Print version
        env:
          STEPS_CONTEXT: ${{ toJson(steps.version.outputs) }}
        run: echo "$STEPS_CONTEXT"

      - name: Login to Dockerhub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.USER_DH_BACK_LEO }}
          password: ${{ secrets.PASSW_DH_BACK_LEO }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v4.0.0
        with:
          context: ./gamb-back/
          push: true
          tags: |
            leveau/gamb_back_image:latest
            leveau/gamb_back_image:${{ steps.version.outputs.version }}

  deploy-app:
    runs-on: ubuntu-22.04
    needs: [build-and-push-image]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install sshpass
        run: |
          sudo apt update
          sudo apt install sshpass -y

      - name: Deploy via SSH
        run: |
          sshpass -p ${{ secrets.EC2_KEY }} ssh -o StrictHostKeyChecking=no ubuntu@52.22.187.150 << 'EOF'
            echo 'Conectado com sucesso!'
            docker pull leveau/gamb_back_image:latest
            docker pull leveau/gamb_back_image:${{ needs.build-and-push-image.outputs.version }}

            # Stop and remove old containers
            docker compose down

            # Start new containers with environment variables
            
            DJANGO_SECRET_KEY= ${{ secrets.DJANGO_SECRET_KEY }}
            DEBUG= ${{ secrets.DEBUG }}
            DJANGO_LOGLEVEL= ${{ secrets.DJANGO_LOGLEVEL }}
            DJANGO_ALLOWED_HOSTS= ${{ secrets.DJANGO_ALLOWED_HOSTS }}
            DATABASE_ENGINE= ${{ secrets.DATABASE_ENGINE }}
            DATABASE_NAME= ${{ secrets.DATABASE_NAME }}
            DATABASE_USERNAME= ${{ secrets.DATABASE_USERNAME }}
            DATABASE_PASSWORD= ${{ secrets.DATABASE_PASSWORD }}
            DATABASE_HOST= ${{ secrets.DATABASE_HOST }}
            DATABASE_PORT= ${{ secrets.DATABASE_PORT }}

            docker compose up -d

            # Cleanup
            docker image prune -f
          EOF
